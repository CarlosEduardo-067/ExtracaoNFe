import json
import re
import logging
from groq import Groq

logger = logging.getLogger()

def formatar_cnpj_cpf(valor):
    if len(valor) == 14:
        return f"{valor[:2]}.{valor[2:5]}.{valor[5:8]}/{valor[8:12]}-{valor[12:]}"
    elif len(valor) == 11:
        return f"{valor[:3]}.{valor[3:6]}.{valor[6:9]}-{valor[9:]}"
    return valor

# Valida o formato da nota
def validar_nota_fiscal(dados, texto):
    logger.info(f"‚ÑπÔ∏è Validando os dados gerados pela LLM.")

    # Define todos os valores como string
    try:
        logger.info(f"‚ÑπÔ∏è Validando formato do jason e reformatando campos como string.")
        for chave in ["nome_emissor", "CNPJ_emissor", "endereco_emissor", "CNPJ_CPF_consumidor", "data_emissao", "numero_nota_fiscal", "serie_nota_fiscal", "valor_total", "forma_pgto"]:
            if dados[chave] is not None and not isinstance(dados[chave], str):
                dados[chave] = str(dados[chave])
    except:
        return 0

    # Captura e mant√©m valores mais precisos do texto original feito com NLTK
    logger.info(f"‚ÑπÔ∏è Capturando dados mais precisos gerados pelo NLTK.")
    linhas = texto.split('\n')
    for linha in linhas:
        if "CNPJ do Emissor" in linha:
            padrao_cnpj = r'(\b\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}\b|\b\d{14}\b)'
            resultado_cnpj = re.search(padrao_cnpj, linha)
            
            if resultado_cnpj:
                cnpj = resultado_cnpj.group(1)
                # Remover os caracteres especiais, mantendo apenas os n√∫meros
                cnpj = re.sub(r'\D', '', cnpj)
                dados["CNPJ_emissor"] = cnpj
        
        if "CNPJ/CPF do Consumidor" in linha:
            padrao_cnpj_cpf = r'(\b\d{11}\b|\b\d{14}\b|\b\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}\b|\b\d{3}\.\d{3}\.\d{3}-\d{2}\b)'
            resultado_cnpj_cpf = re.search(padrao_cnpj_cpf, linha)
            
            if resultado_cnpj_cpf:
                cnpj_cpf = resultado_cnpj_cpf.group(1)
                cnpj_cpf = re.sub(r'\D', '', cnpj_cpf)
                dados["CNPJ_CPF_consumidor"] = cnpj_cpf

        if "N√∫mero da Nota Fiscal" in linha:
            padrao_num = r'(\b\d{6}|\d{9}\b)'
            resultado_num = re.search(padrao_num, linha)
            
            if resultado_num:
                dados["numero_nota_fiscal"] = resultado_num.group(1)

        if "S√©rie da Nota Fiscal" in linha:
            padrao_serie = r'(\b\d{3}\b)'
            resultado_serie = re.search(padrao_serie, linha)
            
            if resultado_serie:
                dados["serie_nota_fiscal"] = resultado_serie.group(1)

        if "Valor Total" in linha:
            padrao_total = r'(\b\d+([,.]\d{2})?\b)'
            resultado_total = re.search(padrao_total, linha)
            
            if resultado_total:
                dados["valor_total"] = resultado_total.group(1)

    # Verifica a forma de pagamento
    if dados["forma_pgto"] not in {"dinheiropix", "outros", None}:
        logger.info(f"‚ùå Forma de pagamento inv√°lida.")
        return 0
    
    # Verifica o numero 
    if dados["numero_nota_fiscal"] is not None and not re.fullmatch(r"\d{6}|\d{9}", dados["numero_nota_fiscal"]):
        logger.info(f"‚ùå N√∫mero da nota fiscal inv√°lida.")
        return 0
    
    # Verifica a serie
    if dados["serie_nota_fiscal"] is not None and not re.fullmatch(r"\d{3}", dados["serie_nota_fiscal"]):
        logger.info(f"‚ùå S√©rie da nota fiscal inv√°lida.")
        return 0
    
    # Verifica o valor total, tira zeros a esquerda e corrige , para .
    if dados["valor_total"] is not None:
        if not re.fullmatch(r"\d+([,.]\d{2})?", dados["valor_total"]):
            logger.info(f"‚ùå Valor total inv√°lido.")
            return 0
        dados["valor_total"] = re.sub(r'^0+(\d+)', r'\1', dados["valor_total"])
        dados["valor_total"] = dados["valor_total"].replace(",", ".")
        if not dados["valor_total"].endswith('.00'):
            dados["valor_total"] += '.00'
    
    # Verifica o CNPJ/CPF do Consumidor e formata se necess√°rio
    if dados["CNPJ_CPF_consumidor"] is not None:
        logger.info(f"‚ùå CPF/CNPJ do consumidor inv√°lido.")
        if re.fullmatch(r"\d{11}|\d{14}", dados["CNPJ_CPF_consumidor"]):
            dados["CNPJ_CPF_consumidor"] = formatar_cnpj_cpf(dados["CNPJ_CPF_consumidor"])
        elif not re.fullmatch(r"\d{3}\.\d{3}\.\d{3}-\d{2}|\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}", dados["CNPJ_CPF_consumidor"]):
            return 0
    
    # Verifica o CNPJ do Emissor e formata se necess√°rio
    if dados["CNPJ_emissor"] is not None:
        if re.fullmatch(r"\d{14}", dados["CNPJ_emissor"]):
            dados["CNPJ_emissor"] = formatar_cnpj_cpf(dados["CNPJ_emissor"])
        elif not re.fullmatch(r"\d{3}\.\d{3}\.\d{3}-\d{2}|\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}", dados["CNPJ_CPF_consumidor"]):
            logger.info(f"‚ùå CNPJ do emissor inv√°lido.")
            return 0
        
    if dados["data_emissao"] is not None and not re.fullmatch(r"\d{2}/\d{2}/\d{4}", dados["data_emissao"]):
        logger.info(f"‚ùå Data de emiss√£o inv√°lida.")
        return 0
    
    logger.info(f"‚úÖ Valida√ß√£o bem sucedida.")
    return 1

# Processamento dos dados e refinamento com a LLM
def processar_nota_com_llm(texto):
    GROQ_API_KEY = "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"

    client = Groq(api_key=GROQ_API_KEY)
    
    prompt = f'''
Texto da nota fiscal:

{texto}'''
    
    # Faz a chamada para a API da Groq e define a prompt
    response = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[{"role": "system", "content": """
Extraia os seguintes dados de uma nota fiscal e retorne em formato JSON:
Nome do emissor, CNPJ do emissor, Endere√ßo do emissor, CNPJ ou CPF do consumidor,
Data de emiss√£o, N√∫mero da nota fiscal, Valor total e Forma de pagamento.
                   
Esta nota foi extraida com uma inteligencia artificial e pode conter erros, seu trabalho tamb√©m √© identificar esses erros
e descarta-los definindo os campos como null para estes casos.
                   
N√£o escreva a forma de pagamento!! Escreva seguindo o padr√£o:
Para Dinheiro ou PIX insira "dinheiropix". Para Cart√£o de Cr√©dito, Boleto ou outros escreva "outros".
                   
Caso algum campo n√£o seja encontrado, coloque como null. N√£o invente valores n√£o especificados no texto.
Fique atento ao identificar o nome do emissor (as vezes ele pode estar em quebras de linha).
Verifique se o CNPJ ou CPF √© realmente v√°lido, caso contr√°rio descarte e defina como null.
                   
N√∫mero da Nota Fiscal:
O n√∫mero pode ter 6 ou 9 d√≠gitos. Valores diferentes disso devem ser definidos como null.

N√∫mero de S√©rie:
Sempre ser√° um n√∫mero de 3 d√≠gitos. Valores diferentes disso devem ser definidos como null.
                   
SE A SERIE N√ÉO TIVER EXATAMENTE 3 D√çGITOS DESCARTE E DEFINA COMO NULL!!!
N√ÉO INVENTE VALORES!! SE ELES N√ÉO BATEM COM A DEFINI√á√ÉO DEFINA NULL!!
                   
Se a data estiver em padr√£o americano ajuste e se for algum valor que n√£o fa√ßa sentido como data, defina null.

Siga o Formato de Sa√≠da JSON desejado:

{
"nome_emissor": "<nome-fornecedor>",
"CNPJ_emissor": "00.000.000/0000-00",
"endereco_emissor": "<endereco-fornecedor>",
"CNPJ_CPF_consumidor": "000.000.000-00",
"data_emissao": "00/00/0000",
"numero_nota_fiscal": "123456",
"serie_nota_fiscal": "123",
"valor_total": "0000.00",
"forma_pgto": "<dinheiropix/outros>"
}
                                      
N√£o escreva nada al√©m da sa√≠da em Json. Sem explica√ß√µes ou textos adicionais. N√£o use { } no texto de sa√≠da.
                   """},
                  {"role": "user", "content": prompt}],
        max_tokens=512
    )

    # Pega a resposta gerada pelo modelo
    resultado = response.choices[0].message.content

    # Para evitar casos onde a LLM esqueceu os par√™nteses
    resultado = resultado.replace("{","")
    resultado = resultado.replace("}","")
    resultado = "{" + resultado + "\n}"

    # Tenta transformar em Json se n√£o for poss√≠vel descarta a altera√ß√£o da LLM
    try:
        dados_json = json.loads(resultado)
        logger.info(f"‚ÑπÔ∏è Tentativa da LLM:\n{resultado}")
        if not validar_nota_fiscal(dados_json, texto):
            logger.info(f"üîÑ LLM iniciando nova tentativa.")
            return processar_nota_com_llm(texto)
    except json.JSONDecodeError:
        logger.info(f"‚ùå Erro ao formatar json.")
        logger.info(f"üîÑ LLM iniciando nova tentativa.")
        return processar_nota_com_llm(texto)

    return dados_json

def lambda_handler(event, context):
    logger.info(f"‚ÑπÔ∏è Importando dados da Lambda NLTK.")
    file_name = event['file_name']
    bucket_name = event['bucket_name']
    nota_texto = event['important_data']
    logger.info(f"‚úÖ Dados importados:\n{nota_texto}")

    resultado_json = processar_nota_com_llm(nota_texto)
    logger.info(f"‚úÖ JSON FINAL:\n{resultado_json}")
    # Retorna o Json ap√≥s o processo completo da LLM
    return {
        "result_json": resultado_json,
        "file_name": file_name,
        "bucket_name": bucket_name
    }
